#!/usr/bin/env python3
# Copyright (C) 2015 Canonical
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Provisioning script for beagle bone black."""

import argparse
import subprocess
import time

import constants


def setboot(mode):
    """
    Set the boot mode of the device.

    :param mode:
        One of 'master' or 'test'
    :raises RuntimeError:
        If the command times out or anything else fails.

    This method sets the snappy boot method to the specified value.
    """
    if mode not in ('master', 'test'):
        raise KeyError
    cmd = ['ssh', constants.CONTROL_HOST, 'bin/setboot', mode]
    print("DEBUG: running {}".format(cmd))
    try:
        subprocess.check_call(cmd, timeout=10)
    except:
        raise RuntimeError("timeout reaching control host!")


def hardreset():
    """
    Reboot the device.

    :raises RuntimeError:
        If the command times out or anything else fails.

    .. note::
        This function executes ``bin/hardreset`` which is not a part of a
        standard image. You need to provide it yourself.
    """
    cmd = ['ssh', constants.CONTROL_HOST, 'bin/hardreset']
    print("DEBUG: running {}".format(cmd))
    try:
        subprocess.check_call(cmd, timeout=20)
    except:
        raise RuntimeError("timeout reaching control host!")


def ensure_test_image():
    """
    Actively switch the device to boot the test image.

    :raises RuntimeError:
        If the command times out or anything else fails.
    """
    # FIXME: I don't have a great way to ensure we're in the test image
    # yet, so just check that we're *not* in the emmc image
    print("DEBUG: Booting the test image")
    cmd = ['ssh', constants.TEST_USER_HOST, 'sudo /sbin/halt']
    try:
        subprocess.check_call(cmd)
    except:
        pass
    time.sleep(60)
    setboot('test')
    hardreset()

    emmc_booted = False
    started = time.time()
    while time.time() - started < 300:
        try:
            emmc_booted = is_emmc_image_booted()
        except:
            continue
        break
    # Check again if we are in the emmc image
    if emmc_booted:
        # XXX: This should *never* happen since we set the boot mode!
        raise RuntimeError("Still booting to emmc after flashing image!")


def is_emmc_image_booted():
    """
    Check if the emmc image is booted.

    :returns:
        True if the emmc image is currently booted, False otherwise.
    :raises RuntimeError:
        If the command times out or anything else fails.

    .. note::
        The emmc contains the non-test image.
    """
    cmd = ['ssh', constants.TEST_USER_HOST, 'cat /etc/issue']
    # FIXME: come up with a better way of checking this
    output = subprocess.check_output(
        cmd, stderr=subprocess.STDOUT, timeout=10)
    if 'BeagleBoardUbuntu' in str(output):
        return True
    return False


def ensure_emmc_image():
    """
    Actively switch the device to boot the test image.

    :raises RuntimeError:
        If the command times out or anything else fails.
    """
    emmc_booted = False
    print("DEBUG: Making sure the emmc image is booted")
    try:
        emmc_booted = is_emmc_image_booted()
    except:
        # don't worry if this doesn't work, we'll hard reset later
        pass

    if not emmc_booted:
        # We are not in the emmc image, so just hard reset
        setboot('master')
        hardreset()

        started = time.time()
        while time.time() - started < 300:
            try:
                emmc_booted = is_emmc_image_booted()
            except:
                continue
            break
        # Check again if we are in the emmc image
        if not emmc_booted:
            raise RuntimeError("Could not reboot to emmc!")


def flash_sd(image_url):
    """
    Flash the image at :image_url to the sd card.

    :param image_url:
        URL of the image to flash. The image has to be compatible with a flat
        SD card layout. It will be downloaded and gunzipped over the SD card.
    :raises RuntimeError:
        If the command times out or anything else fails.
    """
    cmd = ['ssh', constants.TEST_USER_HOST,
           'curl {} | gunzip| sudo dd of=/dev/mmcblk0 bs=32M'.format(
               image_url)]
    print("DEBUG: running {}".format(cmd))
    try:
        # XXX: I hope 30 min is enough? but maybe not!
        subprocess.check_call(cmd, timeout=1800)
    except:
        raise RuntimeError("timeout reached while flashing image!")


def parse_args():
    """Parse command line arguments and return them."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--image-url', required=True,
                        help='URL of the image to install')
    args = parser.parse_args()
    return args


def main():
    """Main function."""
    args = parse_args()

    print("DEBUG: ensure_emmc_image")
    ensure_emmc_image()
    print("DEBUG: flash_sd")
    flash_sd(args.image_url)
    print("DEBUG: ensure_test_image")
    ensure_test_image()

if __name__ == "__main__":
    main()
